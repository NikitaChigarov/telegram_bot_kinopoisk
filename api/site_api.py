from datetime import datetime
from os.path import basename
from typing import List, Dict

import requests
from telebot.apihelper import ApiTelegramException

from config_data import config
from utils.misc.pars_data import get_string


def _search(url, params, success=200) -> List[Dict]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞, –∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ api –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö
    """
    answer_list = []
    answer_fall = [{"poster": "screenshot_from_telegram/no_poster.png",
                    "description": "–ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –∏—Å–∫–∞–ª."}]
    url = url
    params_query = params

    headers = {
        "accept": "application/json",
        "X-API-KEY": config.API_KEY
    }
    try:
        response = requests.get(url, params=params_query, headers=headers, timeout=5)

        count_answer = len(response.json()["docs"])
        status_code = response.status_code

        if status_code == success:
            for index in range(count_answer):
                model_dict = {}
                id_film = response.json()["docs"][index].get("id")
                name = response.json()["docs"][index].get("name")
                description = response.json()["docs"][index].get("description")
                kp_rating, imdb_rating = (response.json()["docs"][index]["rating"].get("kp"),
                                          response.json()["docs"][index]["rating"].get("imdb"))
                year = response.json()["docs"][index].get("year")
                list_genres = response.json()["docs"][index].get("genres")
                genres = get_string(list_genres)
                age_rating = response.json()["docs"][index].get("ageRating")
                poster = response.json()["docs"][index]["poster"].get("url") if not None \
                    else "screenshot_from_telegram/no_poster.png"
                full_desc = (
                    f'üìΩ–ù–∞–∑–≤–∞–Ω–∏–µ: {name} \nüéØ–ñ–∞–Ω—Ä:{genres} \nüíØ–ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating} \tüóΩIMDB: {imdb_rating} '
                    f'\nüìÜ–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year} \nüë∂–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥: {age_rating}+ \n\nüé¨–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}')
                model_dict["id_film"] = id_film
                model_dict["poster"] = poster
                model_dict["description"] = full_desc
                answer_list.append(model_dict)
            return answer_list
    except ApiTelegramException as exc:
        print(
            f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≤—ã–∑–≤–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {type(exc)} - {exc}\n–í—Ä–µ–º—è - {datetime.now()}. "
            f"–ú–µ—Å—Ç–æ - {basename(__file__)}")
        return answer_fall


def _by_custom_params(type_search: str, rating: str, genre_name: str, func=_search) -> List[Dict]:
    """–ü–µ—Ä–µ–¥–∞—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ _search"""
    page_count = 10
    url = "https://api.kinopoisk.dev/v1.4/movie"
    params_query = {"limit": page_count, "isSeries": type_search, "rating.kp": rating, "genres.name": genre_name}
    response = func(url, params_query)
    return response


def _by_title_params(title: str, func=_search) -> List[Dict]:
    """–ü–µ—Ä–µ–¥–∞—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ _search"""
    page_count = 5
    url = "https://api.kinopoisk.dev/v1.4/movie/search"
    params_query = {"limit": page_count, "query": title}
    response = func(url, params_query)
    return response


class ApiInterface:
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞.
    –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é - title_response
    –ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º - custom_response
    """

    @staticmethod
    def title_response():
        """–í—ã–∑–æ–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        return _by_title_params

    @staticmethod
    def custom_response():
        """–í—ã–∑–æ–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        return _by_custom_params
